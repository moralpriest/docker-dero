# Stage 1: Build the application
ARG GO_VERSION=1.23
FROM golang:${GO_VERSION}-alpine AS builder

# Install necessary build tools and strip binaries
RUN apk add --no-cache binutils upx

# Build arguments
ARG VERSION=1.0.0
ARG EXPLORER_PORT=8081

# Add proper labels
LABEL org.opencontainers.image.version="${VERSION}"
LABEL org.opencontainers.image.description="Dero blockchain explorer"
LABEL org.opencontainers.image.source="https://github.com/civilware/derohe"
LABEL maintainer="moralpriest@tutamail.com"

WORKDIR /app

# Copy go.mod and go.sum from the project root (using a relative path from the build context) (for example, from derohe/go.mod and derohe/go.sum) to leverage Docker cache
COPY ../go.mod ../go.sum ./

# Download dependencies and clean cache
RUN go mod download && \
    go mod tidy && \
    rm -rf /go/pkg/mod/cache

# Copy the rest of the application source code (including explorer.go) from cmd/explorer
COPY . .

# Build the explorer with maximum optimization
RUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -mod=mod \
    -gcflags="-N -l" \
    -trimpath \
    -ldflags="-s -w -buildid=" \
    -o explorer ./cmd/explorer && \
    strip --strip-all explorer && \
    upx --best --lzma explorer && \
    rm -rf /go/pkg /go/src

# Stage 2: Create the final minimal image
FROM scratch

# Copy only the ca-certificates (and a minimal tzdata file (UTC) if needed) from alpine
COPY --from=alpine:latest /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/

# Copy the binary from builder (and ensure it is executable)
COPY --from=builder /app/explorer /usr/local/bin/explorer

# Set environment variables (and expose the explorer port)
ENV PATH="/usr/local/bin:${PATH}"
EXPOSE 8081/tcp

# Default command (using absolute path)
ENTRYPOINT ["/usr/local/bin/explorer"]
CMD ["--http-address=0.0.0.0:8081"] 
